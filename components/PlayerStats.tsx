// frontend/components/PlayerStats.tsx

import { useEffect, useState } from "react";

// --- INTERFACES ---
interface RankData {
Â  queueType: string;
Â  tier: string;
Â  rank: string;
Â  leaguePoints: number;
Â  wins: number;
Â  losses: number;
}

interface PlayerData {
Â  name: string;
Â  tagLine: string;
Â  summonerLevel: number;
Â  ranks: RankData[];
Â  error?: string;
}

// ðŸ›‘ Esperamos el RIOT ID completo
interface PlayerStatsProps {
Â  riotId: string; 
Â  region: string; 
}

export default function PlayerStats({ riotId, region }: PlayerStatsProps) { 
Â  const [data, setData] = useState<PlayerData | null>(null);
Â  const [error, setError] = useState<string | null>(null);
Â  const [loading, setLoading] = useState(false);

Â  // No necesitamos dividir el ID aquÃ­, solo lo usamos para la URL y la interfaz

Â  useEffect(() => {
Â  Â  if (!riotId || !region) return;

Â  Â  const fetchPlayer = async () => {
Â  Â  Â  setError(null);
Â  Â  Â  setData(null);
Â  Â  Â  setLoading(true);

Â  Â  Â  try {
Â  Â  Â  Â  // Enviamos el Riot ID completo y la regiÃ³n al backend
Â  Â  Â  Â  const res = await fetch(
Â  Â  Â  Â  Â  `/api/riot/player-data?riotId=${encodeURIComponent(riotId)}&regionLoL=${region}`
Â  Â  Â  Â  );
Â  Â  Â  Â  
Â  Â  Â  Â  const json = (await res.json()) as PlayerData; 
Â  Â  Â  Â  
Â  Â  Â  Â  if (json.error) {
Â  Â  Â  Â  Â  Â  setError(json.error);
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  setData(json); 
Â  Â  Â  Â  }

Â  Â  Â  } catch {
Â  Â  Â  Â  setError("Error de red al conectar con el servidor.");
Â  Â  Â  } finally {
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  }
Â  Â  };

Â  Â  fetchPlayer();
Â  }, [riotId, region]); 

Â  if (!riotId || !region) return null;

Â  return (
Â  Â  <div className="mt-4 p-4 border rounded bg-gray-50 w-full" style={{ marginTop: 20, border: '1px solid #ddd', padding: 15, borderRadius: 8 }}>
Â  Â  Â  {loading && <p style={{ textAlign: 'center' }}>Cargando estadÃ­sticas de **{riotId}** en {region.toUpperCase()}...</p>}
Â  Â  Â  {error && <p style={{ color: 'red', textAlign: 'center', fontWeight: 'bold' }}>Error: {error}</p>}
Â  Â  Â  {data && (
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <h2 style={{ fontSize: 20, marginBottom: 10 }}>{data.name}#{data.tagLine} (Nivel {data.summonerLevel})</h2>
Â  Â  Â  Â  Â  <p style={{ fontSize: 14, color: '#555' }}>RegiÃ³n: {region.toUpperCase()}</p>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  <h3 style={{ fontWeight: 'bold', marginTop: 15, marginBottom: 5 }}>Ranked Stats:</h3>
Â  Â  Â  Â  Â  {data.ranks?.length ? (
Â  Â  Â  Â  Â  Â  <div style={{ marginTop: 5 }}>
Â  Â  Â  Â  Â  Â  Â  {data.ranks.map((stat) => (
Â  Â  Â  Â  Â  Â  Â  Â  <div key={stat.queueType} style={{ border: '1px solid #eee', padding: 10, borderRadius: 5, marginBottom: 8, backgroundColor: '#fff' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ fontWeight: 'bold', color: '#0070f3' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {stat.queueType.replace('RANKED_SOLO_5x5', 'Solo/Duo').replace('RANKED_FLEX_SR', 'Flexible')}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <strong>{stat.tier} {stat.rank}</strong> ({stat.leaguePoints} LP)
Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p style={{ fontSize: 12, color: '#777' }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  W: {stat.wins} | L: {stat.losses} (Win Rate: {((stat.wins / (stat.wins + stat.losses)) * 100).toFixed(0)}%)
Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <p style={{ color: '#777' }}>Sin estadÃ­sticas clasificatorias disponibles.</p>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
}