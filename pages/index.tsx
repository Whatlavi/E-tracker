"use client";
import { useState } from "react";

// --- INTERFACES DE DATOS (Necesarias para la compilaciÃ³n) ---

interface LeagueStat {
Â  queueType: string;
Â  tier: string;
Â  rank: string;
Â  leaguePoints: number;
Â  wins: number;
Â  losses: number;
}

interface Mastery {
Â  championId: number;
Â  championPoints: number;
}

// Interfaz para la respuesta del invocador (viene de /api/riot/player-data.ts)
interface SummonerData {
Â  id: string;
Â  name: string;
Â  puuid: string;
Â  summonerLevel: number;
Â  profileIconId: number;
}

// Interfaz para el estado completo del jugador
interface PlayerState {
Â  summoner: SummonerData;
Â  stats?: LeagueStat[];
}

// --------------------------------------------------------------------

export default function Home() {
Â  const [username, setUsername] = useState("");
Â  const [playerData, setPlayerData] = useState<PlayerState | null>(null);
Â  const [matches, setMatches] = useState<string[]>([]);
Â  const [masteries, setMasteries] = useState<Mastery[]>([]);
Â  const [loading, setLoading] = useState(false);
Â  const [error, setError] = useState("");

Â  const fetchData = async (cleanName: string) => {
Â  Â  if (!cleanName) return setError("Ingresa un nombre de invocador");

Â  Â  setLoading(true);
Â  Â  setError("");
Â  Â  setPlayerData(null);
Â  Â  setMatches([]);
Â  Â  setMasteries([]);

Â  Â  try {
Â  Â  Â  // 1. ðŸ”¹ Obtener datos del summoner
Â  Â  Â  const playerRes = await fetch(`/api/riot/player-data?summoner=${cleanName}`);

Â  Â  Â  if (!playerRes.ok) {
Â  Â  Â  Â  // Maneja errores 404/500 de tu API Route
Â  Â  Â  Â  const errorData = await playerRes.json().catch(() => ({ error: 'Error desconocido' }));
Â  Â  Â  Â  throw new Error(`Error al buscar invocador: ${errorData.error || playerRes.statusText}`);
Â  Â  Â  }
Â  Â  Â  Â  Â  
Â  Â  Â  // La respuesta es directamente el objeto SummonerData
Â  Â  Â  const summonerData: SummonerData = await playerRes.json();
Â  Â  Â  
Â  Â  Â  // ðŸš¨ CORRECCIÃ“N CLAVE: Verifica si el PUUID existe en el objeto que viene de la API.
Â  Â  Â  const puuid = summonerData.puuid; 
Â  Â  Â  if (!puuid) {
Â  Â  Â  Â  // Este error indica que la respuesta de Riot fue extraÃ±a, aunque haya sido 200 OK.
Â  Â  Â  Â  throw new Error("Datos de invocador incompletos (falta PUUID).");
Â  Â  Â  }

Â  Â  Â  // Establece el estado principal con el objeto completo del invocador
Â  Â  Â  setPlayerData({ summoner: summonerData, stats: [] }); 

Â  Â  Â  // 2. ðŸ”¹ Obtener Ãºltimas partidas (usando el PUUID)
Â  Â  Â  const matchesRes = await fetch(`/api/riot/matches?puuid=${puuid}`);
Â  Â  Â  if (matchesRes.ok) {
Â  Â  Â  Â  const matchesData: string[] = await matchesRes.json();
Â  Â  Â  Â  setMatches(matchesData.slice(0, 10));
Â  Â  Â  } else {
Â  Â  Â  Â  console.error("Fallo al cargar partidas.");
Â  Â  Â  }

Â  Â  Â  // 3. ðŸ”¹ Obtener maestrÃ­as de campeÃ³n (usando el PUUID)
Â  Â  Â  const masteryRes = await fetch(`/api/riot/champion-masteries?puuid=${puuid}`);
Â  Â  Â  if (masteryRes.ok) {
Â  Â  Â  Â  const masteryData: Mastery[] = await masteryRes.json();
Â  Â  Â  Â  setMasteries(masteryData.slice(0, 10));
Â  Â  Â  } else {
Â  Â  Â  Â  console.error("Fallo al cargar maestrÃ­as.");
Â  Â  Â  }

Â  Â  } catch (err: unknown) {
Â  Â  Â  if (err instanceof Error) setError(err.message);
Â  Â  Â  else setError("Ha ocurrido un error desconocido.");
Â  Â  Â  console.error(err);
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };
Â  
Â  const summoner = playerData?.summoner;
Â  // const stats = playerData?.stats; // Si implementas stats, Ãºsalo aquÃ­

Â  return (
Â  Â  <main className="min-h-screen bg-black text-white flex flex-col items-center justify-start p-8">
Â  Â  Â  <h1 className="text-4xl font-bold mb-6">EliteGG Tracker</h1>

Â  Â  Â  <div className="flex flex-col sm:flex-row gap-2 items-center">
Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  placeholder="Nombre del invocador (ej: Faker)"
Â  Â  Â  Â  Â  value={username}
Â  Â  Â  Â  Â  onChange={(e) => setUsername(e.target.value)}
Â  Â  Â  Â  Â  className="border border-gray-500 p-2 rounded text-white bg-black placeholder-white w-64"
Â  Â  Â  Â  />
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  const cleanName = username.split("#")[0].trim();
Â  Â  Â  Â  Â  Â  fetchData(cleanName);
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  className="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition"
Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {loading ? "Cargando..." : "Buscar"}
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

Â  Â  Â  {error && <p className="mt-4 text-red-500 font-semibold">{error}</p>}

Â  Â  Â  {summoner && (
Â  Â  Â  Â  <section className="mt-6 w-full max-w-2xl bg-gray-900 p-4 rounded shadow-lg">
Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold mb-3 border-b border-gray-700 pb-2">InformaciÃ³n del Jugador: {summoner.name}</h2>
Â  Â  Â  Â  Â  <ul className="space-y-1">
Â  Â  Â  Â  Â  Â  <li><strong>Nombre:</strong> {summoner.name}</li>
Â  Â  Â  Â  Â  Â  <li><strong>Nivel:</strong> {summoner.summonerLevel}</li>
Â  Â  Â  Â  Â  Â  <li><strong>PUUID:</strong> <span className="text-sm truncate inline-block max-w-full">{summoner.puuid}</span></li>
Â  Â  Â  Â  Â  Â  <li><strong>Icono de Perfil:</strong> {summoner.profileIconId}</li>
Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  </section>
Â  Â  Â  )}
      
Â  Â  Â  {matches.length > 0 && (
Â  Â  Â  Â  <section className="mt-6 w-full max-w-2xl bg-gray-900 p-4 rounded shadow-lg">
Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold mb-2">Ãšltimas Partidas (Match IDs)</h2>
Â  Â  Â  Â  Â  <ul className="list-disc list-inside space-y-1">
Â  Â  Â  Â  Â  Â  {matches.map((match) => (
Â  Â  Â  Â  Â  Â  Â  <li key={match} className="text-sm truncate">{match}</li>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  </section>
Â  Â  Â  )}

Â  Â  Â  {masteries.length > 0 && (
Â  Â  Â  Â  <section className="mt-6 w-full max-w-2xl bg-gray-900 p-4 rounded shadow-lg">
Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold mb-2">MaestrÃ­as de CampeÃ³n (Top 10)</h2>
Â  Â  Â  Â  Â  <ul className="list-disc list-inside space-y-1">
Â  Â  Â  Â  Â  Â  {masteries.map((m) => (
Â  Â  Â  Â  Â  Â  Â  <li key={m.championId}>
Â  Â  Â  Â  Â  Â  Â  Â  CampeÃ³n **{m.championId}** â†’ Puntos: **{m.championPoints.toLocaleString()}**
Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  </section>
Â  Â  Â  )}
Â  Â  </main>
Â  );
}